# Generated by Django 3.2 on 2021-04-07 07:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Product', '0001_initial'),
        ('Counterparty', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Breakdown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Поломка')),
            ],
            options={
                'verbose_name': 'Поломка',
                'verbose_name_plural': 'Поломки',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Поломка')),
            ],
            options={
                'verbose_name': 'Комплектация',
                'verbose_name_plural': 'Комплектация',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_created=True, verbose_name='Created')),
                ('closed', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Closed')),
                ('date_of_modify', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('comments', models.TextField(blank=True, default='', max_length=1000, verbose_name='Коментарий')),
                ('client', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='Counterparty.partner')),
                ('modify_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiers', to=settings.AUTH_USER_MODEL, verbose_name='Последний редактор')),
                ('parentOrder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ServiceCenter.serviceorder', verbose_name='На основании')),
            ],
            options={
                'verbose_name': 'Сервисное обращение',
                'verbose_name_plural': 'Сервисные обращения',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ServiceStatuses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Название состояния')),
                ('is_start', models.BooleanField(default=False, verbose_name='Начальный этап')),
                ('is_terminate', models.BooleanField(default=False, verbose_name='Завершает обработку')),
                ('next_state', models.ManyToManyField(blank=True, default=None, to='ServiceCenter.ServiceStatuses', verbose_name='Следующие действия')),
            ],
            options={
                'verbose_name': 'Состояние заказа',
                'verbose_name_plural': 'Состояния заказов',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(blank=True, max_length=150, null=True, verbose_name='serial numbers')),
                ('date_of_sold', models.DateTimeField(blank=True, default=None, null=True, verbose_name='sold')),
                ('life', models.PositiveIntegerField(verbose_name='life')),
                ('date_of_purchase', models.DateTimeField(blank=True, default=None, null=True, verbose_name='sold')),
                ('sold_document', models.CharField(blank=True, max_length=20, null=True, verbose_name='sold document')),
                ('purchase_document', models.CharField(blank=True, max_length=30, null=True, verbose_name='purchase document')),
                ('warranty_document', models.CharField(blank=True, max_length=30, null=True, verbose_name='warranty document')),
                ('answerable', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='responsibles', to='Counterparty.partner')),
                ('buyer', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='buyers', to='Counterparty.partner')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Product.products')),
                ('seller', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sellers', to='Counterparty.partner')),
            ],
            options={
                'verbose_name': 'Гарантийный товар',
                'verbose_name_plural': 'Гарантийные товары',
                'ordering': ['date_of_sold'],
            },
        ),
        migrations.CreateModel(
            name='ServiceOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(blank=True, max_length=500, null=True, verbose_name='Коментарий')),
                ('breakdown', models.ManyToManyField(to='ServiceCenter.Breakdown', verbose_name='Поломки')),
                ('equipment', models.ManyToManyField(to='ServiceCenter.Equipment', verbose_name='Комплектация')),
                ('next_place', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_service', to='Counterparty.partner', verbose_name='Направляется')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ServiceCenter.serviceorder', verbose_name='Заказ на сервис')),
                ('place', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='from_service', to='Counterparty.partner', verbose_name='Текущее местополодение')),
                ('reinforcement_product', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, related_name='reinforcements', to='ServiceCenter.serviceproducts', verbose_name='Замена на изделие')),
                ('replacement_product', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, related_name='replacements', to='ServiceCenter.serviceproducts', verbose_name='Замена на время ремона')),
                ('service_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ServiceCenter.serviceproducts', verbose_name='Изделие')),
            ],
        ),
        migrations.AddField(
            model_name='serviceorder',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ServiceCenter.servicestatuses'),
        ),
        migrations.CreateModel(
            name='OrderItemHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(max_length=1000)),
                ('date_of_change', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('order_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ServiceCenter.serviceorderitem')),
                ('place', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='Counterparty.partner')),
            ],
        ),
    ]
